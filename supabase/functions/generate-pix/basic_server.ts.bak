// Servidor HTTP bu00e1sico para testar a integrau00e7u00e3o com Pagar.me

const PAGARME_API_KEY = Deno.env.get('PAGARME_API_KEY');
if (!PAGARME_API_KEY) {
  console.error('PAGARME_API_KEY nu00e3o definida');
  Deno.exit(1);
}

// Iniciar o servidor na porta 8080
const server = Deno.listen({ port: 8080 });
console.log('Servidor rodando em http://localhost:8080');

// Funu00e7u00e3o para processar requisiu00e7u00f5es HTTP
async function handleHttp(conn: Deno.Conn) {
  const httpConn = Deno.serveHttp(conn);
  
  for await (const requestEvent of httpConn) {
    try {
      const req = requestEvent.request;
      const url = new URL(req.url);
      
      // Headers CORS
      const headers = {
        "Content-Type": "application/json",
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "POST, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type, Authorization"
      };
      
      // Tratar OPTIONS (CORS preflight)
      if (req.method === "OPTIONS") {
        requestEvent.respondWith(new Response(null, {
          status: 204,
          headers
        }));
        continue;
      }
      
      // Apenas aceitar POST
      if (req.method !== "POST") {
        requestEvent.respondWith(new Response(JSON.stringify({ error: "Mu00e9todo nu00e3o permitido" }), {
          status: 405,
          headers
        }));
        continue;
      }
      
      // Processar requisiu00e7u00e3o POST
      try {
        const body = await req.json();
        console.log("Requisiu00e7u00e3o recebida:", JSON.stringify(body, null, 2));
        
        // Preparar metadados
        const timestamp = new Date().toISOString().replace('T', ' ').substring(0, 19);
        const metadata = {
          source: 'isapass',
          integration: 'supabase-pagarme',
          timestamp,
          partner_id: body.event.partnerId,
          event_name: body.event.name,
          event_date: body.event.date,
          event_location: body.event.location,
          ticket_type: body.event.ticketType,
          section: body.event.section || '',
          row: body.event.row || '',
          seat: body.event.seat || '',
          is_half_price: body.event.isHalfPrice.toString(),
          customer_name: body.customer.name,
          customer_document: body.customer.document,
          customer_email: body.customer.email,
          customer_phone: body.customer.phone
        };
        
        // Preparar payload para o Pagar.me
        const pagarmePayload = {
          items: [
            {
              amount: body.amount,
              description: `Ingresso ${body.event.ticketType} - ${body.event.name}`,
              quantity: 1,
              code: 'pix-payment'
            }
          ],
          customer: {
            name: body.customer.name,
            email: body.customer.email,
            type: 'individual',
            document: body.customer.document,
            phones: {
              mobile_phone: {
                country_code: '55',
                area_code: body.customer.phone.substring(0, 2),
                number: body.customer.phone.substring(2)
              }
            }
          },
          payments: [
            {
              payment_method: 'pix',
              pix: {
                expires_in: 60 * 15 // 15 minutos
              }
            }
          ],
          metadata
        };
        
        try {
          console.log('Enviando requisiu00e7u00e3o para o Pagar.me:', JSON.stringify(pagarmePayload, null, 2));
          
          // Fazer requisiu00e7u00e3o para a API do Pagar.me
          const pagarmeResponse = await fetch('https://api.pagar.me/core/v5/orders', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Basic ${btoa(PAGARME_API_KEY + ':')}`
            },
            body: JSON.stringify(pagarmePayload)
          });
          
          const pagarmeData = await pagarmeResponse.json();
          console.log('Resposta do Pagar.me:', JSON.stringify(pagarmeData, null, 2));
          
          if (!pagarmeResponse.ok) {
            throw new Error(`Erro na API do Pagar.me: ${pagarmeData.message || 'Erro desconhecido'}`);
          }
          
          // Extrair dados relevantes da resposta
          const charge = pagarmeData.charges[0];
          const transaction = charge.last_transaction;
          const qrCode = transaction.qr_code;
          const qrCodeUrl = transaction.qr_code_url;
          const expiresAt = transaction.expires_at;
        
          // Formatar resposta para o cliente
          requestEvent.respondWith(new Response(JSON.stringify({
            order_id: pagarmeData.id,
            amount: body.amount,
            status: pagarmeData.status,
            customer: {
              name: body.customer.name,
              email: body.customer.email,
              document: body.customer.document,
              phone: body.customer.phone
            },
            pix: {
              qr_code: qrCode,
              qr_code_url: qrCodeUrl,
              expires_at: expiresAt
            },
            metadata
          }), {
            status: 200,
            headers
          }));
        } catch (apiError) {
          console.error('Erro ao processar pagamento:', apiError);
          requestEvent.respondWith(new Response(JSON.stringify({ 
            error: apiError instanceof Error ? apiError.message : 'Erro ao processar pagamento',
            details: JSON.stringify(apiError)
          }), {
            status: 500,
            headers
          }));
        }
      } catch (jsonError) {
        console.error('Erro ao processar JSON:', jsonError);
        requestEvent.respondWith(new Response(JSON.stringify({ 
          error: 'Erro ao processar JSON da requisiu00e7u00e3o' 
        }), {
          status: 400,
          headers
        }));
      }
    } catch (connError) {
      console.error('Erro na conexu00e3o:', connError);
      try {
        requestEvent.respondWith(new Response(JSON.stringify({ 
          error: 'Erro interno do servidor' 
        }), {
          status: 500,
          headers: { "Content-Type": "application/json" }
        }));
      } catch (e) {
        console.error('Erro ao responder:', e);
      }
    }
  }
}

// Loop principal para aceitar conexu00f5es
async function main() {
  console.log("Aguardando conexu00f5es...");
  for await (const conn of server) {
    handleHttp(conn).catch(console.error);
  }
}

// Iniciar o servidor
main().catch(console.error);
